"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReviewComment = exports.formatReviewBody = exports.extractPRInfo = void 0;
// Pure function to extract PR info
const extractPRInfo = (pr) => {
    return {
        number: pr.number,
        headSha: pr.head.sha,
        baseSha: pr.base.sha,
        headRef: pr.head.ref,
        baseRef: pr.base.ref,
        author: pr.user.login,
    };
};
exports.extractPRInfo = extractPRInfo;
// Pure function to format review body with PR summary
const formatReviewBody = (model, totalTokens, commentCount, prInfo) => {
    let summary = `## 🐰⚡ Bad Buggy\n\n`;
    // Add PR summary if provided
    if (prInfo) {
        summary += `### 📋 Pull Request Summary\n\n`;
        summary += `**Title:** ${prInfo.title}\n`;
        summary += `**Author:** @${prInfo.author}\n`;
        summary += `**Files Changed:** ${prInfo.filesChanged.length} files\n`;
        summary += `**Changes:** +${prInfo.additions} -${prInfo.deletions}\n`;
        if (prInfo.description && prInfo.description.trim()) {
            summary += `**Description:** ${prInfo.description.trim()}\n`;
        }
        summary += `\n**Modified Files:**\n`;
        prInfo.filesChanged.slice(0, 10).forEach((file) => {
            summary += `- \`${file}\`\n`;
        });
        if (prInfo.filesChanged.length > 10) {
            summary += `- ... and ${prInfo.filesChanged.length - 10} more files\n`;
        }
        summary += `\n---\n\n`;
    }
    // Add review details
    const modelInfo = `**Model:** ${model}`;
    const tokenInfo = `**Tokens used:** ${totalTokens.input + totalTokens.output} (${totalTokens.input} input + ${totalTokens.output} output)`;
    const commentInfo = `**Comments:** ${commentCount}`;
    summary += `### 🔍 Review Details\n\n${modelInfo}\n${tokenInfo}\n${commentInfo}\n\n---\n\n*This review was generated by Bad Buggy code reviewer.*`;
    return summary;
};
exports.formatReviewBody = formatReviewBody;
// Pure function to create review comment
const createReviewComment = (path, line, body, end_line) => {
    return {
        path,
        line,
        body,
        end_line,
    };
};
exports.createReviewComment = createReviewComment;
//# sourceMappingURL=github.js.map