import { PullRequest } from "../types";

// Pure function to extract PR info
export const extractPRInfo = (
  pr: PullRequest
): {
  number: number;
  headSha: string;
  baseSha: string;
  headRef: string;
  baseRef: string;
  author: string;
} => {
  return {
    number: pr.number,
    headSha: pr.head.sha,
    baseSha: pr.base.sha,
    headRef: pr.head.ref,
    baseRef: pr.base.ref,
    author: pr.user.login,
  };
};

// Pure function to format review body with PR summary
export const formatReviewBody = (
  model: string,
  totalTokens: { input: number; output: number },
  commentCount: number,
  prInfo?: {
    title: string;
    description: string;
    author: string;
    filesChanged: string[];
    additions: number;
    deletions: number;
  },
  costInfo?: {
    totalCost: number;
    inputCost: number;
    outputCost: number;
  }
): string => {
  let summary = `## 🐰⚡ Bad Buggy\n\n`;

  // Add PR summary if provided
  if (prInfo) {
    summary += `### 📋 Pull Request Summary\n\n`;
    summary += `**Title:** ${prInfo.title}\n`;
    summary += `**Author:** @${prInfo.author}\n`;
    summary += `**Files Changed:** ${prInfo.filesChanged.length} files\n`;
    summary += `**Changes:** +${prInfo.additions} -${prInfo.deletions}\n`;

    if (prInfo.description && prInfo.description.trim()) {
      summary += `**Description:** ${prInfo.description.trim()}\n`;
    }

    summary += `\n**Modified Files:**\n`;
    prInfo.filesChanged.slice(0, 10).forEach((file) => {
      summary += `- \`${file}\`\n`;
    });
    if (prInfo.filesChanged.length > 10) {
      summary += `- ... and ${prInfo.filesChanged.length - 10} more files\n`;
    }
    summary += `\n---\n\n`;
  }

  // Add review details
  const modelInfo = `**Model:** ${model}`;
  const tokenInfo = `**Tokens:** ${totalTokens.input + totalTokens.output} (${totalTokens.input} input, ${totalTokens.output} output)`;
  
  // Add cost information if available
  let costSection = '';
  if (costInfo) {
    const reviewsPerDollar = costInfo.totalCost > 0 ? Math.floor(1 / costInfo.totalCost) : 0;
    costSection = `**Total cost:** $${costInfo.totalCost.toFixed(4)} (equal to ${reviewsPerDollar} reviews per dollar)\n`;
  }
  
  const commentInfo = `**Comments:** ${commentCount}`;

  summary += `### 🔍 Review Details\n\n${modelInfo}\n${costSection}${tokenInfo}\n${commentInfo}\n\n---\n\n*This review was generated by Bad Buggy code reviewer.*`;

  return summary;
};

// Pure function to create review comment (diff-based)
export const createReviewComment = (
  path: string,
  line: number,
  body: string,
  end_line?: number
): {
  path: string;
  line: number;
  body: string;
  end_line?: number;
  commentType: 'diff';
} => {
  return {
    path,
    line,
    body,
    end_line,
    commentType: 'diff',
  };
};

// Pure function to create file-level comment
export const createFileComment = (
  path: string,
  body: string
): {
  path: string;
  body: string;
  commentType: 'file';
} => {
  return {
    path,
    body,
    commentType: 'file',
  };
};
